case_test_scale = max(data[data$State == 'Texas','Cases']) - min(data[data$State == 'Texas','Cases'])
case_train_scale = max(data[data$State != 'Texas','Cases']) - min(data[data$State != 'Texas','Cases'])
# Train RMSE
print(paste0('Training rmse (Beta) : ', round(RMSE(pull(data[data$State != 'Texas','Beta_pred']),
pull(data[data$State != 'Texas','Beta']))*1000/(rows*beta_train_scale),4)))
# Test RMSE
print(paste0('Testing rmse (Beta) : ', round(RMSE(pull(data[data$State == 'Texas','Beta_pred']),
pull(data[data$State == 'Texas','Beta']))*1000/(rows*beta_test_scale),4)))
# Train RMSE
print(paste0('Training rmse (Cases) : ', round(RMSE(pull(data[data$State != 'Texas','Cases_pred']),
pull(data[data$State != 'Texas','Cases']))*1000/(rows*case_train_scale),4)))
# Test RMSE
print(paste0('Testing rmse (Cases) : ', round(RMSE(pull(data[data$State == 'Texas','Cases_pred']),
pull(data[data$State == 'Texas','Cases']))*1000/(rows*case_test_scale),4)))
return(data)
}
######################################################################################
# Read data
######################################################################################
covid_us_st<-read.csv('Output/US_state_Covid19_output.csv',stringsAsFactors = FALSE)
pop<-read.csv('Population/US_state_population.csv',stringsAsFactors = FALSE) %>%
dplyr::select(c('NAME','POPESTIMATE2019')) %>%
setNames(c('State','Population'))
st_age<-read.csv('Additional/State_agegroup.csv',stringsAsFactors = FALSE) %>%
setNames(c("State","Child_0_18","Adults_19_25","Adults_26_34","Adults_35_54","Adults_55_64","Adults_65" ))
st_homeless<-read.csv('Additional/State_homeless.csv',stringsAsFactors = FALSE)
st_hospital<-read.csv('Additional/State_hospital.csv',stringsAsFactors = FALSE)
st_popdensity<-read.csv('Additional/State_popdensity.csv',stringsAsFactors = FALSE) %>%
setNames(c("State","Population","Area","PopDensity" ))
st_race<-read.csv('Additional/State_race.csv',stringsAsFactors = FALSE) %>%
setNames(c('State',"White","Black","Hispanic","Native_indian","Asian","Hawaiian","Two_more"))
st_urban<-read.csv('Additional/State_urban.csv',stringsAsFactors = FALSE) %>%
dplyr::select(-c('FIPS'))
######################################################################################
# Data wrangling and feature mapping
######################################################################################
covid_us_st <- covid_us_st %>%
mutate(CPM = Cases_Percent*1000000,
DPM = Death_Percent*1000000) %>%
dplyr::select(c('Day','State','CPM','DPM','Beta')) %>%
arrange(State,Day) %>%
group_by(State) %>%
mutate(CPM_lag1 = dplyr::lag(CPM, n = 1, default = NA),
CPM_lag2 = dplyr::lag(CPM, n = 2, default = NA),
CPM_lag3 = dplyr::lag(CPM, n = 3, default = NA),
CPM_lag4 = dplyr::lag(CPM, n = 4, default = NA),
DPM_lag1 = dplyr::lag(DPM, n = 1, default = NA),
DPM_lag2 = dplyr::lag(DPM, n = 2, default = NA),
DPM_lag3 = dplyr::lag(DPM, n = 3, default = NA),
DPM_lag4 = dplyr::lag(DPM, n = 4, default = NA),
Beta_lag1 = dplyr::lag(Beta, n = 1, default = NA),
Beta_lag2 = dplyr::lag(Beta, n = 2, default = NA),
Beta_lag3 = dplyr::lag(Beta, n = 3, default = NA),
Beta_lag4 = dplyr::lag(Beta, n = 4, default = NA))
covid_init <- covid_us_st %>%
filter(Day == 0) %>%
left_join(.,pop, by = c('State' = 'State')) %>%
mutate(Init = CPM/1000000) %>%
dplyr::select(c('State','Init','Population'))
features <- st_age %>%
left_join(.,st_popdensity, by = c('State' = 'State')) %>%
left_join(.,st_race, by = c('State' = 'State')) %>%
left_join(.,st_urban, by = c('State' = 'State')) %>%
left_join(.,st_hospital, by = c('State' = 'State')) %>%
left_join(.,st_homeless, by = c('State' = 'State')) %>%
mutate(Homeless = round(HomlessPop*100/Population,4)) %>%
dplyr::select(-c('Population','Area','HomlessPop'))
covid_us_st <- covid_us_st %>%
filter(!State %in% c('District of Columbia','Puerto Rico')) %>%
left_join(.,features, by = c('State' = 'State')) %>%
mutate(Urban = Urban/100) %>%
ungroup() %>%
drop_na()
rm(features,st_age,st_homeless,st_hospital,st_popdensity,st_race,st_urban)
covid_us_st <- covid_us_st %>%
mutate_at(.vars = vars(Beds,PopDensity,Hospitals),
.funs = scale) %>%
filter(Day >= 6)
######################################################################################
# Data modelling - single window
######################################################################################
# Training and testing split
train_states = c('New York','New Jersey','California','Michigan','Massachusetts',
'Florida','Washington','Illinois','Louisiana','Pennsylvania')
test_states = c('Texas')
covid_test <- covid_us_st %>% filter(State == test_states)
covid_train <- covid_us_st %>% filter(State != test_states)
lm_ridge_model <- linearRidge(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
Beta_lag1*Beta_lag2,
data = covid_train)
model_output <- accuracy_check(lm_ridge_model,covid_init,covid_train,covid_test)
######################################################################################
# Load libraries
######################################################################################
# wrangling
suppressMessages(library(data.table)) # data table manipulation
suppressMessages(library(dplyr)) # Data wrangling
suppressMessages(library(tidyr)) # Data wrangling
suppressMessages(library(stringr)) # Data wrangling
# Modeling
suppressMessages(library(caret)) # rmse and metrics
suppressMessages(library(leaps)) # stepwise regression
suppressMessages(library(ridge)) # rmse and metrics
suppressMessages(library(e1071)) # svm
suppressMessages(library(forecast)) # time series
suppressMessages(library(randomForest)) # RF
# !diagnostics off
options(scipen=999)
######################################################################################
#Working directory and environment
######################################################################################
setwd('C:/Users/Parikshit_verma/Desktop/Covid-19')
######################################################################################
# Functions
######################################################################################
source('seir_simulate.R')
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
seir_fit <- function(beta,case0,pred_day){
# Initial state values
init = rep(0,4)
names(init) <- c('S',"E",'I','R')
init[3] = case0
init[1] = 1 - init[3]
init[2] = 0
init[4] = 0
# Parameter values
param = rep(0,4)
names(param) <- c('mu','beta','sigma','gamma')
param[1] = 0
param[2] = beta
param[3] = 1/5.2
param[4] = 1/21
seir_data<-seir_simulate(init,param,100)
val_fit<-seir_data[pred_day+1,'I']
return(as.numeric(val_fit))
}
accuracy_check <- function(model,init,train_data,test_data){
summary(model)
data <- rbind(train_data,test_data) %>%
mutate(Beta_pred = predict(model,.)) %>%
dplyr::select('Day','State','CPM','Beta','Beta_pred') %>%
left_join(.,init, by = c('State' = 'State'))
for (i in 1:nrow(data)) data$CPM_pred[i] = round(seir_fit(data$Beta_pred[i],
data$Init[i],
data$Day[i])*1000000,2)
data <- data %>%
mutate(Cases = round(CPM*Population/1000000,0),
Cases_pred = round(CPM_pred*Population/1000000,0),
Beta_pred = round(Beta_pred,4)) %>%
dplyr::select(c('Day','State',
'Cases','Cases_pred',
'CPM','CPM_pred',
'Beta','Beta_pred'))
rows = nrow(data[data$State != 'Texas',])
beta_test_scale = max(data[data$State == 'Texas','Beta']) - min(data[data$State == 'Texas','Beta'])
beta_train_scale = max(data[data$State != 'Texas','Beta']) - min(data[data$State != 'Texas','Beta'])
case_test_scale = max(data[data$State == 'Texas','Cases']) - min(data[data$State == 'Texas','Cases'])
case_train_scale = max(data[data$State != 'Texas','Cases']) - min(data[data$State != 'Texas','Cases'])
# Train RMSE
print(paste0('Training rmse (Beta) : ', round(RMSE(pull(data[data$State != 'Texas','Beta_pred']),
pull(data[data$State != 'Texas','Beta']))*1000/(rows*beta_train_scale),4)))
# Test RMSE
print(paste0('Testing rmse (Beta) : ', round(RMSE(pull(data[data$State == 'Texas','Beta_pred']),
pull(data[data$State == 'Texas','Beta']))*1000/(rows*beta_test_scale),4)))
# Train RMSE
print(paste0('Training rmse (Cases) : ', round(RMSE(pull(data[data$State != 'Texas','Cases_pred']),
pull(data[data$State != 'Texas','Cases']))*1000/(rows*case_train_scale),4)))
# Test RMSE
print(paste0('Testing rmse (Cases) : ', round(RMSE(pull(data[data$State == 'Texas','Cases_pred']),
pull(data[data$State == 'Texas','Cases']))*1000/(rows*case_test_scale),4)))
return(data)
}
######################################################################################
# Read data
######################################################################################
covid_us_st<-read.csv('Output/US_state_Covid19_output.csv',stringsAsFactors = FALSE)
pop<-read.csv('Population/US_state_population.csv',stringsAsFactors = FALSE) %>%
dplyr::select(c('NAME','POPESTIMATE2019')) %>%
setNames(c('State','Population'))
st_age<-read.csv('Additional/State_agegroup.csv',stringsAsFactors = FALSE) %>%
setNames(c("State","Child_0_18","Adults_19_25","Adults_26_34","Adults_35_54","Adults_55_64","Adults_65" ))
st_homeless<-read.csv('Additional/State_homeless.csv',stringsAsFactors = FALSE)
st_hospital<-read.csv('Additional/State_hospital.csv',stringsAsFactors = FALSE)
st_popdensity<-read.csv('Additional/State_popdensity.csv',stringsAsFactors = FALSE) %>%
setNames(c("State","Population","Area","PopDensity" ))
st_race<-read.csv('Additional/State_race.csv',stringsAsFactors = FALSE) %>%
setNames(c('State',"White","Black","Hispanic","Native_indian","Asian","Hawaiian","Two_more"))
st_urban<-read.csv('Additional/State_urban.csv',stringsAsFactors = FALSE) %>%
dplyr::select(-c('FIPS'))
######################################################################################
# Data wrangling and feature mapping
######################################################################################
covid_us_st <- covid_us_st %>%
mutate(CPM = Cases_Percent*1000000,
DPM = Death_Percent*1000000) %>%
dplyr::select(c('Day','State','CPM','DPM','Beta')) %>%
arrange(State,Day) %>%
group_by(State) %>%
mutate(CPM_lag1 = dplyr::lag(CPM, n = 1, default = NA),
CPM_lag2 = dplyr::lag(CPM, n = 2, default = NA),
CPM_lag3 = dplyr::lag(CPM, n = 3, default = NA),
CPM_lag4 = dplyr::lag(CPM, n = 4, default = NA),
DPM_lag1 = dplyr::lag(DPM, n = 1, default = NA),
DPM_lag2 = dplyr::lag(DPM, n = 2, default = NA),
DPM_lag3 = dplyr::lag(DPM, n = 3, default = NA),
DPM_lag4 = dplyr::lag(DPM, n = 4, default = NA),
Beta_lag1 = dplyr::lag(Beta, n = 1, default = NA),
Beta_lag2 = dplyr::lag(Beta, n = 2, default = NA),
Beta_lag3 = dplyr::lag(Beta, n = 3, default = NA),
Beta_lag4 = dplyr::lag(Beta, n = 4, default = NA))
covid_init <- covid_us_st %>%
filter(Day == 0) %>%
left_join(.,pop, by = c('State' = 'State')) %>%
mutate(Init = CPM/1000000) %>%
dplyr::select(c('State','Init','Population'))
features <- st_age %>%
left_join(.,st_popdensity, by = c('State' = 'State')) %>%
left_join(.,st_race, by = c('State' = 'State')) %>%
left_join(.,st_urban, by = c('State' = 'State')) %>%
left_join(.,st_hospital, by = c('State' = 'State')) %>%
left_join(.,st_homeless, by = c('State' = 'State')) %>%
mutate(Homeless = round(HomlessPop*100/Population,4)) %>%
dplyr::select(-c('Population','Area','HomlessPop'))
covid_us_st <- covid_us_st %>%
filter(!State %in% c('District of Columbia','Puerto Rico')) %>%
left_join(.,features, by = c('State' = 'State')) %>%
mutate(Urban = Urban/100) %>%
ungroup() %>%
drop_na()
rm(features,st_age,st_homeless,st_hospital,st_popdensity,st_race,st_urban)
covid_us_st <- covid_us_st %>%
mutate_at(.vars = vars(Beds,PopDensity,Hospitals),
.funs = scale) %>%
filter(Day >= 6)
######################################################################################
# Data modelling - single window
######################################################################################
# Training and testing split
train_states = c('New York','New Jersey','California','Michigan','Massachusetts',
'Florida','Washington','Illinois','Louisiana','Pennsylvania')
test_states = c('Texas')
covid_test <- covid_us_st %>% filter(State == test_states)
covid_train <- covid_us_st %>% filter(State != test_states)
lm_ridge_model <- linearRidge(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
Beta_lag1*Beta_lag2 +
Adults_19_25 + Adults_26_34 + Adults_35_54 + Adults_55_64 + Adults_65 +
PopDensity +
White + Black + Hispanic + Native_indian + Asian + Hawaiian + Two_more +
Beds + Homeless,
data = covid_train)
model_output <- accuracy_check(lm_ridge_model,covid_init,covid_train,covid_test)
View(covid_us_st)
######################################################################################
# Load libraries
######################################################################################
# wrangling
suppressMessages(library(data.table)) # data table manipulation
suppressMessages(library(dplyr)) # Data wrangling
suppressMessages(library(tidyr)) # Data wrangling
suppressMessages(library(stringr)) # Data wrangling
# Modeling
suppressMessages(library(caret)) # rmse and metrics
suppressMessages(library(leaps)) # stepwise regression
suppressMessages(library(ridge)) # rmse and metrics
suppressMessages(library(e1071)) # svm
suppressMessages(library(forecast)) # time series
suppressMessages(library(randomForest)) # RF
# !diagnostics off
options(scipen=999)
######################################################################################
#Working directory and environment
######################################################################################
setwd('C:/Users/Parikshit_verma/Desktop/Covid-19')
######################################################################################
# Functions
######################################################################################
source('seir_simulate.R')
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
seir_fit <- function(beta,case0,pred_day){
# Initial state values
init = rep(0,4)
names(init) <- c('S',"E",'I','R')
init[3] = case0
init[1] = 1 - init[3]
init[2] = 0
init[4] = 0
# Parameter values
param = rep(0,4)
names(param) <- c('mu','beta','sigma','gamma')
param[1] = 0
param[2] = beta
param[3] = 1/5.2
param[4] = 1/21
seir_data<-seir_simulate(init,param,100)
val_fit<-seir_data[pred_day+1,'I']
return(as.numeric(val_fit))
}
accuracy_check <- function(model,init,train_data,test_data){
summary(model)
data <- rbind(train_data,test_data) %>%
mutate(Beta_pred = predict(model,.)) %>%
dplyr::select('Day','State','CPM','Beta','Beta_pred') %>%
left_join(.,init, by = c('State' = 'State'))
for (i in 1:nrow(data)) data$CPM_pred[i] = round(seir_fit(data$Beta_pred[i],
data$Init[i],
data$Day[i])*1000000,2)
data <- data %>%
mutate(Cases = round(CPM*Population/1000000,0),
Cases_pred = round(CPM_pred*Population/1000000,0),
Beta_pred = round(Beta_pred,4)) %>%
dplyr::select(c('Day','State',
'Cases','Cases_pred',
'CPM','CPM_pred',
'Beta','Beta_pred'))
rows = nrow(data[data$State != 'Texas',])
beta_test_scale = max(data[data$State == 'Texas','Beta']) - min(data[data$State == 'Texas','Beta'])
beta_train_scale = max(data[data$State != 'Texas','Beta']) - min(data[data$State != 'Texas','Beta'])
case_test_scale = max(data[data$State == 'Texas','Cases']) - min(data[data$State == 'Texas','Cases'])
case_train_scale = max(data[data$State != 'Texas','Cases']) - min(data[data$State != 'Texas','Cases'])
# Train RMSE
print(paste0('Training rmse (Beta) : ', round(RMSE(pull(data[data$State != 'Texas','Beta_pred']),
pull(data[data$State != 'Texas','Beta']))*1000/(rows*beta_train_scale),4)))
# Test RMSE
print(paste0('Testing rmse (Beta) : ', round(RMSE(pull(data[data$State == 'Texas','Beta_pred']),
pull(data[data$State == 'Texas','Beta']))*1000/(rows*beta_test_scale),4)))
# Train RMSE
print(paste0('Training rmse (Cases) : ', round(RMSE(pull(data[data$State != 'Texas','Cases_pred']),
pull(data[data$State != 'Texas','Cases']))*1000/(rows*case_train_scale),4)))
# Test RMSE
print(paste0('Testing rmse (Cases) : ', round(RMSE(pull(data[data$State == 'Texas','Cases_pred']),
pull(data[data$State == 'Texas','Cases']))*1000/(rows*case_test_scale),4)))
return(data)
}
######################################################################################
# Read data
######################################################################################
covid_us_st<-read.csv('Output/US_state_Covid19_output.csv',stringsAsFactors = FALSE)
pop<-read.csv('Population/US_state_population.csv',stringsAsFactors = FALSE) %>%
dplyr::select(c('NAME','POPESTIMATE2019')) %>%
setNames(c('State','Population'))
st_age<-read.csv('Additional/State_agegroup.csv',stringsAsFactors = FALSE) %>%
setNames(c("State","Child_0_18","Adults_19_25","Adults_26_34","Adults_35_54","Adults_55_64","Adults_65" ))
st_homeless<-read.csv('Additional/State_homeless.csv',stringsAsFactors = FALSE)
st_hospital<-read.csv('Additional/State_hospital.csv',stringsAsFactors = FALSE)
st_popdensity<-read.csv('Additional/State_popdensity.csv',stringsAsFactors = FALSE) %>%
setNames(c("State","Population","Area","PopDensity" ))
st_race<-read.csv('Additional/State_race.csv',stringsAsFactors = FALSE) %>%
setNames(c('State',"White","Black","Hispanic","Native_indian","Asian","Hawaiian","Two_more"))
st_urban<-read.csv('Additional/State_urban.csv',stringsAsFactors = FALSE) %>%
dplyr::select(-c('FIPS'))
######################################################################################
# Data wrangling and feature mapping
######################################################################################
covid_us_st <- covid_us_st %>%
mutate(CPM = Cases_Percent*1000000,
DPM = Death_Percent*1000000) %>%
dplyr::select(c('Day','State','CPM','DPM','Beta')) %>%
arrange(State,Day) %>%
group_by(State) %>%
mutate(CPM_lag1 = dplyr::lag(CPM, n = 1, default = NA),
CPM_lag2 = dplyr::lag(CPM, n = 2, default = NA),
CPM_lag3 = dplyr::lag(CPM, n = 3, default = NA),
CPM_lag4 = dplyr::lag(CPM, n = 4, default = NA),
DPM_lag1 = dplyr::lag(DPM, n = 1, default = NA),
DPM_lag2 = dplyr::lag(DPM, n = 2, default = NA),
DPM_lag3 = dplyr::lag(DPM, n = 3, default = NA),
DPM_lag4 = dplyr::lag(DPM, n = 4, default = NA),
Beta_lag1 = dplyr::lag(Beta, n = 1, default = NA),
Beta_lag2 = dplyr::lag(Beta, n = 2, default = NA),
Beta_lag3 = dplyr::lag(Beta, n = 3, default = NA),
Beta_lag4 = dplyr::lag(Beta, n = 4, default = NA))
covid_init <- covid_us_st %>%
filter(Day == 0) %>%
left_join(.,pop, by = c('State' = 'State')) %>%
mutate(Init = CPM/1000000) %>%
dplyr::select(c('State','Init','Population'))
features <- st_age %>%
left_join(.,st_popdensity, by = c('State' = 'State')) %>%
left_join(.,st_race, by = c('State' = 'State')) %>%
left_join(.,st_urban, by = c('State' = 'State')) %>%
left_join(.,st_hospital, by = c('State' = 'State')) %>%
left_join(.,st_homeless, by = c('State' = 'State')) %>%
mutate(Homeless = round(HomlessPop*100/Population,4)) %>%
dplyr::select(-c('Population','Area','HomlessPop'))
covid_us_st <- covid_us_st %>%
filter(!State %in% c('District of Columbia','Puerto Rico')) %>%
left_join(.,features, by = c('State' = 'State')) %>%
mutate(Urban = Urban/100) %>%
ungroup() %>%
drop_na()
rm(features,st_age,st_homeless,st_hospital,st_popdensity,st_race,st_urban)
covid_us_st <- covid_us_st %>%
mutate_at(.vars = vars(Beds,PopDensity,Hospitals),
.funs = scale) %>%
filter(Day >= 6)
######################################################################################
# Data modelling - single window
######################################################################################
# Training and testing split
train_states = c('New York','New Jersey','California','Michigan','Massachusetts',
'Florida','Washington','Illinois','Louisiana','Pennsylvania')
test_states = c('Texas')
covid_test <- covid_us_st %>% filter(State == test_states)
covid_train <- covid_us_st %>% filter(State != test_states)
lm_model <- lm(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
Beta_lag1*Beta_lag2 + Beta_lag1*Beta_lag3 + Beta_lag1*Beta_lag4 +
Beta_lag2*Beta_lag3 + Beta_lag2*Beta_lag4 +
Beta_lag3*Beta_lag4 +
Adults_19_25 + Adults_26_34 + Adults_35_54 + Adults_55_64 + Adults_65 +
PopDensity +
White + Black + Hispanic + Native_indian + Asian + Hawaiian + Two_more +
Beds + Homeless,
data = covid_train)
model_output <- accuracy_check(lm_model,covid_init,covid_train,covid_test)
summary(lm_model)
lm_model <- lm(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
Beta_lag1^2 + Beta_lag2^2 + Beta_lag3^2 + Beta_lag4^2 +
Beta_lag1*Beta_lag2 + Beta_lag1*Beta_lag3 + Beta_lag1*Beta_lag4 +
Beta_lag2*Beta_lag3 + Beta_lag2*Beta_lag4 +
Beta_lag3*Beta_lag4 +
Adults_19_25 + Adults_26_34 + Adults_35_54 + Adults_55_64 + Adults_65 +
PopDensity +
White + Black + Hispanic + Native_indian + Asian + Hawaiian + Two_more +
Beds + Homeless,
data = covid_train)
summary(lm_model)
lm_model <- lm(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
Beta_lag1*Beta_lag1 + Beta_lag2*Beta_lag2 + Beta_lag3*Beta_lag3 + Beta_lag4*Beta_lag4 +
Beta_lag1*Beta_lag2 + Beta_lag1*Beta_lag3 + Beta_lag1*Beta_lag4 +
Beta_lag2*Beta_lag3 + Beta_lag2*Beta_lag4 +
Beta_lag3*Beta_lag4 +
Adults_19_25 + Adults_26_34 + Adults_35_54 + Adults_55_64 + Adults_65 +
PopDensity +
White + Black + Hispanic + Native_indian + Asian + Hawaiian + Two_more +
Beds + Homeless,
data = covid_train)
summary(lm_model)
lm_model <- lm(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
I(Beta_lag1^2) + I(Beta_lag2^2) + I(Beta_lag3^2) + I(Beta_lag4^2) +
Beta_lag1*Beta_lag2 + Beta_lag1*Beta_lag3 + Beta_lag1*Beta_lag4 +
Beta_lag2*Beta_lag3 + Beta_lag2*Beta_lag4 +
Beta_lag3*Beta_lag4 +
Adults_19_25 + Adults_26_34 + Adults_35_54 + Adults_55_64 + Adults_65 +
PopDensity +
White + Black + Hispanic + Native_indian + Asian + Hawaiian + Two_more +
Beds + Homeless,
data = covid_train)
summary(lm_model)
lm_model <- lm(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
I(Beta_lag1^2) + I(Beta_lag2^2) + I(Beta_lag3^2) + I(Beta_lag4^2) +
Beta_lag1*Beta_lag2 + Beta_lag1*Beta_lag3 + Beta_lag1*Beta_lag4 +
Beta_lag2*Beta_lag3 + Beta_lag2*Beta_lag4 +
Beta_lag3*Beta_lag4
data = covid_train)
lm_model <- lm(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
I(Beta_lag1^2) + I(Beta_lag2^2) + I(Beta_lag3^2) + I(Beta_lag4^2) +
Beta_lag1*Beta_lag2 + Beta_lag1*Beta_lag3 + Beta_lag1*Beta_lag4 +
Beta_lag2*Beta_lag3 + Beta_lag2*Beta_lag4 +
Beta_lag3*Beta_lag4,
data = covid_train)
summary(lm_model)
lm_model <- lm(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
I(Beta_lag1^2) + I(Beta_lag2^2) + I(Beta_lag3^2) + I(Beta_lag4^2) +
Beta_lag1*Beta_lag2 + Beta_lag1*Beta_lag3 + Beta_lag1*Beta_lag4 +
Beta_lag2*Beta_lag3 + Beta_lag2*Beta_lag4 +
Beta_lag3*Beta_lag4 +
Adults_19_25 + Adults_26_34 + Adults_35_54 + Adults_55_64 + Adults_65 +
PopDensity +
White + Black + Hispanic + Native_indian + Asian + Hawaiian + Two_more +
Beds + Homeless,
data = covid_train)
model_output <- accuracy_check(lm_model,covid_init,covid_train,covid_test)
lm_ridge_model <- linearRidge(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
I(Beta_lag1^2) + I(Beta_lag2^2) + I(Beta_lag3^2) + I(Beta_lag4^2) +
Beta_lag1*Beta_lag2 + Beta_lag1*Beta_lag3 + Beta_lag1*Beta_lag4 +
Beta_lag2*Beta_lag3 + Beta_lag2*Beta_lag4 +
Beta_lag3*Beta_lag4 +
Adults_19_25 + Adults_26_34 + Adults_35_54 + Adults_55_64 + Adults_65 +
PopDensity +
White + Black + Hispanic + Native_indian + Asian + Hawaiian + Two_more +
Beds + Homeless,
data = covid_train)
model_output <- accuracy_check(lm_ridge_model,covid_init,covid_train,covid_test)
lm_ridge_model <- linearRidge(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
Beta_lag1*Beta_lag2
data = covid_train)
lm_ridge_model <- linearRidge(Beta ~ Day +
Beta_lag1 + Beta_lag2 + Beta_lag3 + Beta_lag4 +
Beta_lag1*Beta_lag2,
data = covid_train)
model_output <- accuracy_check(lm_ridge_model,covid_init,covid_train,covid_test)
install.packages('Xgboost')
install.packages('xgboost')
suppressMessages(library(xgboost)) # RF
xgb_train <- xgb.DMatrix(data = data.matrix((covid_train %>% dplyr::select(-c('State','CPM','DPM')))), label = covid_train$Beta)
xgb_model <- xgboost(data = xgb_train, nrounds = 20, verbose = 1)
model_output <- accuracy_check(xgb_model,covid_init,covid_train,covid_test)
